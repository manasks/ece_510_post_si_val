# Base code for project 2 part1
#
# Requirements for project 2 part1
#

#
# 

# Next project will be implementing some of the skills you have learned..
# Create simple program to generate mov instructions in memory using provided 
# template.
# 
# Requirements
#
# Provide first knob (parameter) to allow number of instructions to generate
#
# Add build mov immediate to register as inline function to ia32_encode.h.  
# Name: build_imm_to_register
#
# Add build mov reg to memory as inline function to ia32_encode.h.  
# Name: build_reg_to_memory
#
# Be able to dump instructions out from gdb by using allocated buffer 
# (use base address pointer)
# can x/ai mptr from encode.c:27 (for example)

# Encode at least 10 instructions of the 3 types
# Mov reg to reg, mov_imm_to_reg, mov_reg_to_mem
# 
# Dump out the instructions you have encoded via gdb and submit along with code.


# Use template to get you started:
# Makefile
# Header file include/ia32_encode.h
# Simple base test file: encodeit.c

# Building the code...
# In order to build the code

make

# can run it, or debug it..

gdb encodeit

# if you want to clean out the obj, exec

make clean


# Debugging

# if debug it, if you run up to encodeit.c:27
# you can then dump out the code you generated by using x/10ai in gdb
# example

gdb encodeit

# can set a break point at main or line 27..
# after the generation stage (build_instruction has run)
# then the buffer should be populated and you can dump it out.

Breakpoint 3, main (argc=1, argv=0x7fff5fbff920) at encodeit.c:27
27		fprintf(stderr,"generation program complete, instructions generated: %d\n",ibuilt);
(gdb) x/10ai mptr
0x100800000:	mov    %ecx,%ebx
0x100800002:	mov    %edx,%edi
...
